     1                                  ; ============================================================================
     2                                  ; Homemade GPS Receiver
     3                                  ; Copyright (C) 2018 Max Apodaca
     4                                  ; Copyright (C) 2013 Andrew Holme
     5                                  ;
     6                                  ; This program is free software: you can redistribute it and/or modify
     7                                  ; it under the terms of the GNU General Public License as published by
     8                                  ; the Free Software Foundation, either version 3 of the License, or
     9                                  ; (at your option) any later version.
    10                                  ;
    11                                  ; This program is distributed in the hope that it will be useful,
    12                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    13                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14                                  ; GNU General Public License for more details.
    15                                  ;
    16                                  ; You should have received a copy of the GNU General Public License
    17                                  ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
    18                                  ;
    19                                  ; http://www.aholme.co.uk/GPS/Main.htm
    20                                  ; ============================================================================
    21                                  
    22                                  ;.model Tiny
    23                                  ;.code
    24                                  SECTION .text
    25                                  
    26                                  NUM_CHANS       equ 12
    27                                  
    28                                  ; ============================================================================
    29                                  
    30                                  op_nop          equ 08000h
    31                                  op_dup          equ 08100h
    32                                  op_swap         equ 08200h
    33                                  op_swap16       equ 08300h
    34                                  op_over         equ 08400h
    35                                  op_drop         equ 08500h
    36                                  op_rot          equ 08600h
    37                                  op_addi         equ 08700h
    38                                  op_add          equ 08800h ; + opt_cin
    39                                  op_sub          equ 08900h
    40                                  op_mult         equ 08A00h
    41                                  op_and          equ 08B00h
    42                                  op_or           equ 08C00h
    43                                  op_xor          equ 08D00h
    44                                  op_not          equ 08E00h
    45                                  
    46                                  op_shl64        equ 09000h
    47                                  op_shl          equ 09100h
    48                                  op_shr          equ 09200h
    49                                  op_rdBit        equ 09300h
    50                                  op_fetch16      equ 09400h
    51                                  op_store16      equ 09500h
    52                                  op_r            equ 09C00h
    53                                  op_r_from       equ 09D00h
    54                                  op_to_r         equ 09E00h
    55                                  
    56                                  op_call         equ 0A000h
    57                                  op_branch       equ 0A001h
    58                                  op_branchZ      equ 0B000h
    59                                  op_branchNZ     equ 0B001h
    60                                  
    61                                  op_rdReg        equ 0C000h
    62                                  op_wrReg        equ 0D000h
    63                                  op_wrEvt        equ 0E000h
    64                                  
    65                                  opt_ret         equ 1 << 7
    66                                  opt_cin         equ 1 << 6
    67                                  
    68                                  op_ret          equ op_nop + opt_ret
    69                                  
    70                                  ; ============================================================================
    71                                  
    72                                  GET_CHAN_IQ     equ 1 << 0
    73                                  GET_SRQ         equ 1 << 1
    74                                  GET_SNAPSHOT    equ 1 << 2
    75                                  JTAG_RX         equ 1 << 3
    76                                  GET_JOY         equ 1 << 4
    77                                  
    78                                  JTAG_TX         equ 1 << 0
    79                                  SET_VCO         equ 1 << 1
    80                                  SET_MASK        equ 1 << 2
    81                                  SET_CHAN        equ 1 << 3
    82                                  
    83                                  SET_CA_NCO      equ 1 << 4
    84                                  SET_LO_NCO      equ 1 << 5
    85                                  SET_SV          equ 1 << 6
    86                                  SET_PAUSE       equ 1 << 7
    87                                  
    88                                  SET_LCD         equ 1 << 8
    89                                  
    90                                  JTAG_RST        equ 1 << 0
    91                                  JTAG_RDY        equ 1 << 1
    92                                  SAMPLER_RST     equ 1 << 2
    93                                  GET_SAMPLES     equ 1 << 3
    94                                  GET_MEMORY      equ 1 << 4
    95                                  GET_LOG         equ 1 << 5
    96                                  PUT_LOG         equ 1 << 6
    97                                  LOG_RST         equ 1 << 7
    98                                  SET_DAC         equ 1 << 8
    99                                  
   100                                  ; ============================================================================
   101                                  
   102                                  ;Service         MACRO chan                  ; ... flag
   103                                  %macro  Service  1
   104                                                  ;LOCAL $1
   105                                                  dw op_branchZ + %%1
   106                                                  ;dw chan * sizeof CHANNEL + Chans
   107                                                  dw %1*CHANNEL_SIZE+Chans
   108                                                  ;dw chan
   109                                                  dw %1
   110                                                  dw op_call + Method
   111                                  %%1:             ;
   112                                                  ;ENDM                        ; ...
   113                                  %endmacro
   114                                  
   115                                  ; ============================================================================
   116                                  
   117 00000000 0000                    Entry:          dw 0
   118 00000002 04D0                                    dw op_wrReg + SET_MASK
   119 00000004 02C0                                    dw op_rdReg + GET_SRQ
   120 00000006 0085                                    dw op_drop
   121                                  
   122 00000008 02E0                    Ready:          dw op_wrEvt + JTAG_RDY
   123                                  
   124 0000000A 02C0                    Main:           dw op_rdReg + GET_SRQ       ; 0
   125 0000000C 0093                                    dw op_rdBit                 ; host_srq
   126                                                  ;dw NUM_CHANS dup(0,op_rdBit); host_srq f(n-1) f(n-2) ... f(1) f(0)
   127 0000000E 00000093<rept>                          TIMES NUM_CHANS dw 0,op_rdBit; host_srq f(n-1) f(n-2) ... f(1) f(0)
   128                                  
   129                                                  ;chan = 0
   130                                                  %assign chan 0
   131                                                  ;rept NUM_CHANS
   132                                                  %rep NUM_CHANS
   133                                                      ;Service chan
   134                                                      ;chan = chan + 1
   135                                                      dw op_branchZ + .endChan%+chan
   136                                                      ;dw chan * sizeof CHANNEL + Chans
   137                                                      dw chan*CHANNEL_SIZE+Chans
   138                                                      ;dw chan
   139                                                      dw chan
   140                                                      dw op_call + Method
   141                                      .endChan%+chan:
   142                                                      %assign chan chan+1
   143                                                  ;endm                        ; host_srq
   144                                                  %endrep
   144                              <1> 
   144                              <1> 
   144 0000003E [46B0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000040 [D400]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 00000042 0000                <1>  dw chan
   144 00000044 [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 00000046 [4EB0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000048 [0001]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 0000004A 0100                <1>  dw chan
   144 0000004C [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 0000004E [56B0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000050 [2C01]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 00000052 0200                <1>  dw chan
   144 00000054 [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 00000056 [5EB0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000058 [5801]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 0000005A 0300                <1>  dw chan
   144 0000005C [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 0000005E [66B0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000060 [8401]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 00000062 0400                <1>  dw chan
   144 00000064 [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 00000066 [6EB0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000068 [B001]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 0000006A 0500                <1>  dw chan
   144 0000006C [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 0000006E [76B0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000070 [DC01]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 00000072 0600                <1>  dw chan
   144 00000074 [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 00000076 [7EB0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000078 [0802]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 0000007A 0700                <1>  dw chan
   144 0000007C [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 0000007E [86B0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000080 [3402]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 00000082 0800                <1>  dw chan
   144 00000084 [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 00000086 [8EB0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000088 [6002]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 0000008A 0900                <1>  dw chan
   144 0000008C [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 0000008E [96B0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000090 [8C02]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 00000092 0A00                <1>  dw chan
   144 00000094 [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   144                              <1> 
   144                              <1> 
   144 00000096 [9EB0]              <1>  dw op_branchZ + .endChan%+chan
   144                              <1> 
   144 00000098 [B802]              <1>  dw chan*CHANNEL_SIZE+Chans
   144                              <1> 
   144 0000009A 0B00                <1>  dw chan
   144 0000009C [20A3]              <1>  dw op_call + Method
   144                              <1>  .endChan%+chan:
   144                              <1>  %assign chan chan+1
   144                              <1> 
   145                                  
   146 0000009E [0AB0]                                  dw op_branchZ + Main        ;
   147                                  
   148 000000A0 01E0                                    dw op_wrEvt + JTAG_RST      ;
   149 000000A2 08C0                                    dw op_rdReg + JTAG_RX       ; cmd
   150 000000A4 0091                                    dw op_shl                   ; offset
   151 000000A6 [B400]0088                              dw Commands, op_add         ; &Commands[cmd]
   152 000000AA 0094                                    dw op_fetch16               ; vector
   153 000000AC [0800]                                  dw Ready                    ; vector Ready
   154                                                  ;dw 2 dup (op_to_r)          ;                   ; Ready vector
   155 000000AE 009E<rept>                              TIMES 2 dw op_to_r          ;                   ; Ready vector
   156 000000B2 8080                                    dw op_ret
   157                                  
   158                                  ; ============================================================================
   159                                  
   160 000000B4 [BC04]                  Commands:       dw CmdSample
   161 000000B6 [C004]                                  dw CmdSetMask
   162 000000B8 [C604]                                  dw CmdSetRateCA
   163 000000BA [E804]                                  dw CmdSetRateLO
   164 000000BC [0A05]                                  dw CmdSetGainCA
   165 000000BE [2005]                                  dw CmdSetGainLO
   166 000000C0 [3605]                                  dw CmdSetSV
   167 000000C2 [4005]                                  dw CmdPause
   168 000000C4 [4A05]                                  dw CmdSetVCO
   169 000000C6 [5805]                                  dw CmdGetSamples
   170 000000C8 [7C05]                                  dw CmdGetChan
   171 000000CA [8605]                                  dw CmdGetClocks
   172 000000CC [C005]                                  dw CmdGetGlitches
   173 000000CE [DE05]                                  dw CmdSetDAC
   174 000000D0 [2406]                                  dw CmdSetLCD
   175 000000D2 [2A06]                                  dw CmdGetJoy
   176                                  
   177                                  ; ============================================================================
   178                                  
   179                                  MAX_BITS        equ 64
   180                                  CHANNEL_SIZE    equ 44
   181                                  
   182                                  ;CHANNEL         struct
   183                                  ;struc CHANNEL
   184                                  ;ch_NAV_MS       dw ?                        ; Milliseconds 0 ... 19
   185                                  ;ch_NAV_BITS     dw ?                        ; Bit count
   186                                  ;ch_NAV_GLITCH   dw ?                        ; Glitch count
   187                                  ;ch_NAV_PREV     dw ?                        ; Last data bit = ip[15]
   188                                  ;ch_NAV_BUF      dw MAX_BITS/16 dup (?)      ; NAV data buffer
   189                                  ;ch_NAV_BUF      TIMES MAX_BITS/16 dw ?      ; NAV data buffer
   190                                  ;ch_CA_FREQ      dq ?                        ; Loop integrator
   191                                  ;ch_LO_FREQ      dq ?                        ; Loop integrator
   192                                  ;ch_IQ           dw 2 dup (?)               ; Last IP, QP
   193                                  ;ch_IQ           TIMES 2 dw ?                ; Last IP, QP
   194                                  ;ch_CA_GAIN      dw 2 dup (?)               ; KI, KP-KI = 20, 27-20
   195                                  ;ch_CA_GAIN      TIMES 2 dw ?                ; KI, KP-KI = 20, 27-20
   196                                  ;ch_LO_GAIN      dw 2 dup (?)               ; KI, KP-KI = 21, 28-21
   197                                  ;ch_LO_GAIN      TIMES 2 dw ?                ; KI, KP-KI = 21, 28-21
   198                                  ;CHANNEL         ends
   199                                  ;endstruc
   200                                  
   201                                  ;CHANNEL         struct
   202                                  struc CHANNEL
   203 00000000 <res 00000002>          ch_NAV_MS:      resw 1                      ; Milliseconds 0 ... 19
   204 00000002 <res 00000002>          ch_NAV_BITS:    resw 1                      ; Bit count
   205 00000004 <res 00000002>          ch_NAV_GLITCH:  resw 1                      ; Glitch count
   206 00000006 <res 00000002>          ch_NAV_PREV:    resw 1                      ; Last data bit = ip[15]
   207 00000008 <res 00000008>          ch_NAV_BUF:     resw MAX_BITS/16            ; NAV data buffer
   208 00000010 <res 00000008>          ch_CA_FREQ:     resq 1                      ; Loop integrator
   209 00000018 <res 00000008>          ch_LO_FREQ:     resq 1                      ; Loop integrator
   210 00000020 <res 00000004>          ch_IQ           resw 2                      ; Last IP, QP
   211 00000024 <res 00000004>          ch_CA_GAIN      resw 2                      ; KI, KP-KI = 20, 27-20
   212 00000028 <res 00000004>          ch_LO_GAIN      resw 2                      ; KI, KP-KI = 21, 28-21
   213                                  endstruc
   214                                  
   215                                  ;Chans:          CHANNEL NUM_CHANS dup (<>)
   216                                  Chans:
   217                                  %rep NUM_CHANS
   218                                                  istruc CHANNEL
   219                                                  iend
   220                                  %endrep
   220                              <1>  istruc CHANNEL
   220 000000D4 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 00000100 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 0000012C 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 00000158 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 00000184 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 000001B0 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 000001DC 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 00000208 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 00000234 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 00000260 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 0000028C 00<rept>            <1>  iend
   220                              <1>  istruc CHANNEL
   220 000002B8 00<rept>            <1>  iend
   221                                  ;Chans:  istruc CHANNEL iend
   222                                  
   223 000002E4 2C00008A                GetChanPtr:     dw CHANNEL_SIZE, op_mult
   224 000002E8 [D400]8088                              dw Chans, op_add + opt_ret
   225                                  
   226                                  ; ============================================================================
   227                                  
   228                                  ;CloseLoop       MACRO freq, gain, nco       ; err32
   229                                  %macro CloseLoop 3
   230                                                  %assign freq %1
   231                                                  %assign gain %2
   232                                                  %assign nco %3
   233                                                  dw op_extend                ; err64                         9
   234                                                  dw op_r, op_addi + gain     ; err64 &gain[0]                2
   235                                                  dw op_fetch16               ; err64 ki                      1
   236                                                  dw op_shl64_n               ; ki.e64                     ki+8
   237                                                  dw op_over, op_over         ; ki.e64 ki.e64                 2
   238                                                  dw op_r, op_addi + freq     ; ki.e64 ki.e64 &freq           2
   239                                                  dw op_fetch64               ; ki.e64 ki.e64 old64          19
   240                                                  dw op_add64                 ; ki.e64 new64                  7
   241                                                  dw op_over, op_over         ; ki.e64 new64 new64            2
   242                                                  dw op_r, op_addi + freq     ; ki.e64 new64 new64 &freq      2
   243                                                  dw op_store64, op_drop      ; ki.e64 new64                 18
   244                                                  dw op_swap64                ; new64 ki.e64                  6
   245                                                  dw op_r, op_addi + gain + 2 ; new64 ki.e64 &gain[1]         2
   246                                                  dw op_fetch16               ; new64 ki.e64 kp-ki            1
   247                                                  dw op_shl64_n               ; new64 kp.e64            kp-ki+8
   248                                                  dw op_add64                 ; nco64                         7
   249                                                  dw op_drop                  ; nco32                         1
   250                                                  dw op_wrReg + nco           ;                               1
   251                                                  ;ENDM                        ;                 TOTAL = kp + 98
   252                                  %endmacro
   253                                  
   254                                  ; ============================================================================
   255                                  
   256 000002EC 00000093                GetCount:       dw 0, op_rdBit              ; [14]                         20
   257 000002F0 0081                                    dw op_dup                   ; [14] [14]
   258 000002F2 0091                                    dw op_shl                   ; [14] [15]
   259 000002F4 0088                                    dw op_add                   ; [15:14]
   260                                                  ;dw 13 dup (op_rdBit)        ; [15:1]
   261 000002F6 0093<rept>                              TIMES 13 dw op_rdBit        ; [15:1]
   262 00000310 8091                                    dw op_shl + opt_ret         ; [15:0]
   263                                  
   264 00000312 [ECA2]                  GetPower:       dw op_call + GetCount       ; i                            48
   265 00000314 0081008A                                dw op_dup, op_mult          ; i^2
   266 00000318 [ECA2]                                  dw op_call + GetCount       ; i^2 q
   267 0000031A 0081008A                                dw op_dup, op_mult          ; i^2 q^2
   268 0000031E 8088                                    dw op_add + opt_ret         ; p
   269                                  
   270                                  ; ============================================================================
   271                                  
   272 00000320 08D0                    Method:         dw op_wrReg + SET_CHAN      ; this
   273 00000322 009E                                    dw op_to_r                  ;
   274                                  
   275 00000324 01C0                                    dw op_rdReg + GET_CHAN_IQ   ; 0
   276 00000326 0093                                    dw op_rdBit                 ; bit
   277 00000328 0081                                    dw op_dup                   ; bit bit
   278 0000032A [F0A2]                                  dw op_call + GetCount + 4   ; bit ip
   279 0000032C [ECA2]                                  dw op_call + GetCount       ; bit ip qp
   280                                  
   281 0000032E 00840084                                dw op_over, op_over         ; bit ip qp ip qp
   282 00000332 009C                                    dw op_r                     ; bit ip qp ip qp this
   283 00000334 2087                                    dw op_addi + ch_IQ          ; bit ip qp ip qp &q
   284 00000336 00950287                                dw op_store16, op_addi + 2  ; bit ip qp ip &i
   285 0000033A 00950085                                dw op_store16, op_drop      ; bit ip qp
   286                                  
   287 0000033E 008A                                    dw op_mult                  ; bit ip*qp
   288                                  
   289                                                  CloseLoop ch_LO_FREQ, ch_LO_GAIN, SET_LO_NCO
   289                              <1>  %assign freq %1
   289                              <1>  %assign gain %2
   289                              <1>  %assign nco %3
   289 00000340 [C8A6]              <1>  dw op_extend
   289 00000342 009C2887            <1>  dw op_r, op_addi + gain
   289 00000346 0094                <1>  dw op_fetch16
   289 00000348 [7AA6]              <1>  dw op_shl64_n
   289 0000034A 00840084            <1>  dw op_over, op_over
   289 0000034E 009C1887            <1>  dw op_r, op_addi + freq
   289 00000352 [3CA6]              <1>  dw op_fetch64
   289 00000354 [6EA6]              <1>  dw op_add64
   289 00000356 00840084            <1>  dw op_over, op_over
   289 0000035A 009C1887            <1>  dw op_r, op_addi + freq
   289 0000035E [52A6]0085          <1>  dw op_store64, op_drop
   289 00000362 [64A6]              <1>  dw op_swap64
   289 00000364 009C2A87            <1>  dw op_r, op_addi + gain + 2
   289 00000368 0094                <1>  dw op_fetch16
   289 0000036A [7AA6]              <1>  dw op_shl64_n
   289 0000036C [6EA6]              <1>  dw op_add64
   289 0000036E 0085                <1>  dw op_drop
   289 00000370 20D0                <1>  dw op_wrReg + nco
   289                              <1> 
   290                                  
   291 00000372 [12A3]                                  dw op_call + GetPower       ; bit pe
   292 00000374 [12A3]                                  dw op_call + GetPower       ; bit pe pl
   293 00000376 0089                                    dw op_sub                   ; bit pe-pl
   294                                  
   295                                                  CloseLoop ch_CA_FREQ, ch_CA_GAIN, SET_CA_NCO
   295                              <1>  %assign freq %1
   295                              <1>  %assign gain %2
   295                              <1>  %assign nco %3
   295 00000378 [C8A6]              <1>  dw op_extend
   295 0000037A 009C2487            <1>  dw op_r, op_addi + gain
   295 0000037E 0094                <1>  dw op_fetch16
   295 00000380 [7AA6]              <1>  dw op_shl64_n
   295 00000382 00840084            <1>  dw op_over, op_over
   295 00000386 009C1087            <1>  dw op_r, op_addi + freq
   295 0000038A [3CA6]              <1>  dw op_fetch64
   295 0000038C [6EA6]              <1>  dw op_add64
   295 0000038E 00840084            <1>  dw op_over, op_over
   295 00000392 009C1087            <1>  dw op_r, op_addi + freq
   295 00000396 [52A6]0085          <1>  dw op_store64, op_drop
   295 0000039A [64A6]              <1>  dw op_swap64
   295 0000039C 009C2687            <1>  dw op_r, op_addi + gain + 2
   295 000003A0 0094                <1>  dw op_fetch16
   295 000003A2 [7AA6]              <1>  dw op_shl64_n
   295 000003A4 [6EA6]              <1>  dw op_add64
   295 000003A6 0085                <1>  dw op_drop
   295 000003A8 10D0                <1>  dw op_wrReg + nco
   295                              <1> 
   296                                  
   297 000003AA 009C                                    dw op_r                     ; bit this
   298 000003AC 0687                                    dw op_addi + ch_NAV_PREV    ; bit &prev
   299 000003AE 0094                                    dw op_fetch16               ; bit prev
   300 000003B0 0084                                    dw op_over                  ; bit prev bit
   301 000003B2 0089                                    dw op_sub                   ; bit diff
   302 000003B4 [E2B3]                                  dw op_branchZ + NavSame     ; bit
   303                                  
   304 000003B6 009C                                    dw op_r                     ; bit this
   305 000003B8 0687                                    dw op_addi + ch_NAV_PREV    ; bit &prev
   306 000003BA 00950085                                dw op_store16, op_drop      ;
   307                                  
   308 000003BE 009C                                    dw op_r                     ; this
   309 000003C0 0087                                    dw op_addi + ch_NAV_MS      ; &ms
   310 000003C2 0094                                    dw op_fetch16               ; ms
   311 000003C4 [D6B3]                                  dw op_branchZ + NavEdge
   312                                  
   313 000003C6 009C                                    dw op_r                     ; this
   314 000003C8 0487                                    dw op_addi + ch_NAV_GLITCH  ; &g
   315 000003CA 0094                                    dw op_fetch16               ; g
   316 000003CC 0187                                    dw op_addi + 1              ; g+1
   317 000003CE 009C                                    dw op_r                     ; g+1 this
   318 000003D0 0487                                    dw op_addi + ch_NAV_GLITCH  ; g+1 &g
   319 000003D2 00950085                                dw op_store16, op_drop      ;
   320                                  
   321 000003D6 0100                    NavEdge:        dw 1                        ; 1
   322 000003D8 009D                                    dw op_r_from                ; 1 this
   323 000003DA 0087                                    dw op_addi + ch_NAV_MS      ; 1 &ms
   324 000003DC 00950085                                dw op_store16, op_drop      ;
   325 000003E0 8080                                    dw op_ret
   326                                  
   327 000003E2 009C                    NavSame:        dw op_r                     ; bit this
   328 000003E4 0087                                    dw op_addi + ch_NAV_MS      ; bit &ms
   329 000003E6 0081                                    dw op_dup                   ; bit &ms &ms
   330 000003E8 0094                                    dw op_fetch16               ; bit &ms ms
   331 000003EA 13000089                                dw 19, op_sub               ; bit &ms ms-19
   332 000003EE [FEB3]                                  dw op_branchZ + NavSave     ; bit &ms
   333                                  
   334 000003F0 0094                                    dw op_fetch16               ; bit ms
   335 000003F2 0187                                    dw op_addi + 1              ; bit ms+1
   336 000003F4 009D                                    dw op_r_from                ; bit ms+1 this
   337 000003F6 0087                                    dw op_addi + ch_NAV_MS      ; bit ms+1 &ms
   338 000003F8 00950085                                dw op_store16, op_drop      ; bit
   339 000003FC 8085                                    dw op_drop + opt_ret        ;
   340                                  
   341 000003FE 00000082                NavSave:        dw 0, op_swap               ; bit 0 &ms
   342 00000402 00950085                                dw op_store16, op_drop      ; bit
   343                                  
   344 00000406 009C                                    dw op_r                     ; bit this
   345 00000408 0287                                    dw op_addi + ch_NAV_BITS    ; bit &cnt
   346 0000040A 0094                                    dw op_fetch16               ; bit cnt
   347 0000040C 0081                                    dw op_dup                   ; bit cnt cnt
   348 0000040E 0187                                    dw op_addi + 1              ; bit cnt cnt+1
   349 00000410 3F00008B                                dw MAX_BITS-1, op_and       ; bit cnt wrapped
   350 00000414 009C                                    dw op_r                     ; bit cnt wrapped this
   351 00000416 0287                                    dw op_addi + ch_NAV_BITS    ; bit cnt wrapped &cnt
   352 00000418 00950085                                dw op_store16, op_drop      ; bit cnt
   353                                  
   354                                                  ;dw 4 dup (op_shr)           ; bit cnt/16
   355 0000041C 0092<rept>                              TIMES 4 dw op_shr           ; bit cnt/16
   356 00000424 0091                                    dw op_shl                   ; bit offset
   357 00000426 009D                                    dw op_r_from                ; bit offset this
   358 00000428 0887                                    dw op_addi + ch_NAV_BUF     ; bit offset buf
   359 0000042A 0088                                    dw op_add                   ; bit ptr
   360 0000042C 0081                                    dw op_dup                   ; bit ptr ptr
   361 0000042E 009E                                    dw op_to_r                  ; bit ptr
   362 00000430 0094                                    dw op_fetch16               ; bit old
   363 00000432 0091                                    dw op_shl                   ; bit old<<1
   364 00000434 0088                                    dw op_add                   ; new
   365 00000436 009D                                    dw op_r_from                ; new ptr
   366 00000438 00950085                                dw op_store16, op_drop      ;
   367 0000043C 8080                                    dw op_ret
   368                                  
   369                                  ; ============================================================================
   370                                  
   371                                  ;UploadSamples:  dw 16 dup (op_wrEvt + GET_SAMPLES)
   372 0000043E 08E0<rept>              UploadSamples:  TIMES 16 dw op_wrEvt + GET_SAMPLES
   373 0000045E 8080                                    dw op_ret
   374                                  
   375                                  ;UploadChan:     dw sizeof CHANNEL / 2 dup (op_wrEvt + GET_MEMORY)
   376 00000460 10E0<rept>              UploadChan:     TIMES CHANNEL_SIZE/2 dw op_wrEvt + GET_MEMORY
   377 0000048C 8080                                    dw op_ret
   378                                  
   379                                  ;UploadClock:    dw 2 dup (op_wrEvt + GET_MEMORY)
   380 0000048E 10E0<rept>              UploadClock:    TIMES 2 dw op_wrEvt + GET_MEMORY
   381                                                  ;dw 0, 16 dup (op_rdBit)
   382 00000492 0000                                    dw 0
   383 00000494 0093<rept>                              TIMES 16 dw op_rdBit
   384 000004B4 01D0                                    dw op_wrReg + JTAG_TX
   385 000004B6 A887                                    dw opt_ret + op_addi + CHANNEL_SIZE - 4
   386                                  
   387 000004B8 10E0                    UploadGlitches: dw op_wrEvt + GET_MEMORY
   388 000004BA AA87                                    dw opt_ret + op_addi + CHANNEL_SIZE - 2
   389                                  
   390                                  ; ============================================================================
   391                                  
   392                                  ;RdReg32         MACRO reg
   393                                  %macro          RdReg32 1
   394                                                  %assign reg %1
   395                                                  ;dw 2 dup (op_rdReg + reg)   ; 0,l 0,h
   396                                                  TIMES 2 dw op_rdReg + reg   ; 0,l 0,h
   397                                                  dw op_swap16                ; 0,l h,0
   398                                                  dw op_add                   ; h,l
   399                                                  ;ENDM
   400                                  %endmacro
   401                                  
   402                                  ; ============================================================================
   403                                  
   404                                  ;SetReg          MACRO reg
   405                                  %macro          SetReg 1
   406                                                  %assign reg %1
   407                                                  dw op_rdReg + JTAG_RX
   408                                                  dw op_wrReg + reg
   409                                                  ;ENDM
   410                                  %endmacro
   411                                  
   412                                  ;SetRate         MACRO member, nco           ;
   413                                  %macro          SetRate 2
   414                                                  %assign member %1
   415                                                  %assign nco %2
   416                                                  dw op_rdReg + JTAG_RX       ; chan
   417                                                  RdReg32       JTAG_RX       ; chan freq32
   418                                                  dw op_swap                  ; freq32 chan
   419                                                  dw op_over                  ; freq32 chan freq32
   420                                                  dw op_over                  ; freq32 chan freq32 chan
   421                                                  dw op_call + GetChanPtr     ; freq32 chan freq32 this
   422                                                  dw op_addi + member         ; freq32 chan freq32 &freq
   423                                                  dw 0, op_swap               ; freq32 chan freq64 &freq
   424                                                  dw op_store64, op_drop      ; freq chan
   425                                                  dw op_wrReg + SET_CHAN      ; freq
   426                                                  dw op_wrReg + nco           ;
   427                                                  ;ENDM
   428                                  %endmacro
   429                                  
   430                                  ;SetGain         MACRO member                ;
   431                                  %macro          SetGain 1
   432                                                  %assign member %1
   433                                                  dw op_rdReg + JTAG_RX       ; chan
   434                                                  RdReg32       JTAG_RX       ; chan  kp,ki
   435                                                  dw op_swap                  ; kp,ki  chan
   436                                                  dw op_call + GetChanPtr     ; kp,ki  this
   437                                                  dw op_addi + member         ; kp,ki  &gain
   438                                                  dw op_store32, op_drop      ;
   439                                                  ;ENDM
   440                                  %endmacro
   441                                  
   442                                  ; ============================================================================
   443                                  
   444 000004BC 04E0                    CmdSample:      dw op_wrEvt + SAMPLER_RST
   445 000004BE 8080                                    dw op_ret
   446                                  
   447                                  CmdSetMask:     SetReg SET_MASK
   447                              <1> CmdSetMask: 
   447                              <1>  %assign reg %1
   447 000004C0 08C0                <1>  dw op_rdReg + JTAG_RX
   447 000004C2 04D0                <1>  dw op_wrReg + reg
   447                              <1> 
   448 000004C4 8080                                    dw op_ret
   449                                  
   450                                  CmdSetRateCA:   SetRate ch_CA_FREQ, SET_CA_NCO
   450                              <1> CmdSetRateCA: 
   450                              <1>  %assign member %1
   450                              <1>  %assign nco %2
   450 000004C6 08C0                <1>  dw op_rdReg + JTAG_RX
   450                              <1>  RdReg32 JTAG_RX
   450                              <2>  %assign reg %1
   450                              <2> 
   450 000004C8 08C0<rept>          <2>  TIMES 2 dw op_rdReg + reg
   450 000004CC 0083                <2>  dw op_swap16
   450 000004CE 0088                <2>  dw op_add
   450                              <2> 
   450 000004D0 0082                <1>  dw op_swap
   450 000004D2 0084                <1>  dw op_over
   450 000004D4 0084                <1>  dw op_over
   450 000004D6 [E4A2]              <1>  dw op_call + GetChanPtr
   450 000004D8 1087                <1>  dw op_addi + member
   450 000004DA 00000082            <1>  dw 0, op_swap
   450 000004DE [52A6]0085          <1>  dw op_store64, op_drop
   450 000004E2 08D0                <1>  dw op_wrReg + SET_CHAN
   450 000004E4 10D0                <1>  dw op_wrReg + nco
   450                              <1> 
   451 000004E6 8080                                    dw op_ret
   452                                  
   453                                  CmdSetRateLO:   SetRate ch_LO_FREQ, SET_LO_NCO
   453                              <1> CmdSetRateLO: 
   453                              <1>  %assign member %1
   453                              <1>  %assign nco %2
   453 000004E8 08C0                <1>  dw op_rdReg + JTAG_RX
   453                              <1>  RdReg32 JTAG_RX
   453                              <2>  %assign reg %1
   453                              <2> 
   453 000004EA 08C0<rept>          <2>  TIMES 2 dw op_rdReg + reg
   453 000004EE 0083                <2>  dw op_swap16
   453 000004F0 0088                <2>  dw op_add
   453                              <2> 
   453 000004F2 0082                <1>  dw op_swap
   453 000004F4 0084                <1>  dw op_over
   453 000004F6 0084                <1>  dw op_over
   453 000004F8 [E4A2]              <1>  dw op_call + GetChanPtr
   453 000004FA 1887                <1>  dw op_addi + member
   453 000004FC 00000082            <1>  dw 0, op_swap
   453 00000500 [52A6]0085          <1>  dw op_store64, op_drop
   453 00000504 08D0                <1>  dw op_wrReg + SET_CHAN
   453 00000506 20D0                <1>  dw op_wrReg + nco
   453                              <1> 
   454 00000508 8080                                    dw op_ret
   455                                  
   456                                  CmdSetGainCA:   SetGain ch_CA_GAIN
   456                              <1> CmdSetGainCA: 
   456                              <1>  %assign member %1
   456 0000050A 08C0                <1>  dw op_rdReg + JTAG_RX
   456                              <1>  RdReg32 JTAG_RX
   456                              <2>  %assign reg %1
   456                              <2> 
   456 0000050C 08C0<rept>          <2>  TIMES 2 dw op_rdReg + reg
   456 00000510 0083                <2>  dw op_swap16
   456 00000512 0088                <2>  dw op_add
   456                              <2> 
   456 00000514 0082                <1>  dw op_swap
   456 00000516 [E4A2]              <1>  dw op_call + GetChanPtr
   456 00000518 2487                <1>  dw op_addi + member
   456 0000051A [56A6]0085          <1>  dw op_store32, op_drop
   456                              <1> 
   457 0000051E 8080                                    dw op_ret
   458                                  
   459                                  CmdSetGainLO:   SetGain ch_LO_GAIN
   459                              <1> CmdSetGainLO: 
   459                              <1>  %assign member %1
   459 00000520 08C0                <1>  dw op_rdReg + JTAG_RX
   459                              <1>  RdReg32 JTAG_RX
   459                              <2>  %assign reg %1
   459                              <2> 
   459 00000522 08C0<rept>          <2>  TIMES 2 dw op_rdReg + reg
   459 00000526 0083                <2>  dw op_swap16
   459 00000528 0088                <2>  dw op_add
   459                              <2> 
   459 0000052A 0082                <1>  dw op_swap
   459 0000052C [E4A2]              <1>  dw op_call + GetChanPtr
   459 0000052E 2887                <1>  dw op_addi + member
   459 00000530 [56A6]0085          <1>  dw op_store32, op_drop
   459                              <1> 
   460 00000534 8080                                    dw op_ret
   461                                  
   462                                  CmdSetSV:       SetReg SET_CHAN
   462                              <1> CmdSetSV: 
   462                              <1>  %assign reg %1
   462 00000536 08C0                <1>  dw op_rdReg + JTAG_RX
   462 00000538 08D0                <1>  dw op_wrReg + reg
   462                              <1> 
   463                                                  SetReg SET_SV
   463                              <1>  %assign reg %1
   463 0000053A 08C0                <1>  dw op_rdReg + JTAG_RX
   463 0000053C 40D0                <1>  dw op_wrReg + reg
   463                              <1> 
   464 0000053E 8080                                    dw op_ret
   465                                  
   466                                  CmdPause:       SetReg SET_CHAN
   466                              <1> CmdPause: 
   466                              <1>  %assign reg %1
   466 00000540 08C0                <1>  dw op_rdReg + JTAG_RX
   466 00000542 08D0                <1>  dw op_wrReg + reg
   466                              <1> 
   467                                                  SetReg SET_PAUSE
   467                              <1>  %assign reg %1
   467 00000544 08C0                <1>  dw op_rdReg + JTAG_RX
   467 00000546 80D0                <1>  dw op_wrReg + reg
   467                              <1> 
   468 00000548 8080                                    dw op_ret
   469                                  
   470 0000054A 08C0                    CmdSetVCO:      dw op_rdReg + JTAG_RX       ; wparam
   471                                                  RdReg32       JTAG_RX       ; wparam lparam
   471                              <1>  %assign reg %1
   471                              <1> 
   471 0000054C 08C0<rept>          <1>  TIMES 2 dw op_rdReg + reg
   471 00000550 0083                <1>  dw op_swap16
   471 00000552 0088                <1>  dw op_add
   471                              <1> 
   472 00000554 02D0                                    dw op_wrReg + SET_VCO       ; wparam
   473 00000556 8085                                    dw op_drop + opt_ret
   474                                  
   475 00000558 01E0                    CmdGetSamples:  dw op_wrEvt + JTAG_RST
   476                                                  ;dw 16 dup (op_call + UploadSamples)
   477 0000055A [3EA4]<rept>                            TIMES 16 dw op_call + UploadSamples
   478 0000057A 8080                                    dw op_ret
   479                                  
   480 0000057C 08C0                    CmdGetChan:     dw op_rdReg + JTAG_RX       ; wparam
   481 0000057E 01E0                                    dw op_wrEvt + JTAG_RST      ; chan
   482 00000580 [E4A2]                                  dw op_call + GetChanPtr     ; this
   483 00000582 [60A4]                                  dw op_call + UploadChan     ; this++
   484 00000584 8085                                    dw op_drop + opt_ret
   485                                  
   486 00000586 01E0                    CmdGetClocks:   dw op_wrEvt + JTAG_RST
   487 00000588 04C0                                    dw op_rdReg + GET_SNAPSHOT
   488                                                  ;dw NUM_CHANS dup (op_rdBit)
   489 0000058A 0093<rept>                              TIMES NUM_CHANS dw op_rdBit
   490 000005A2 01D0                                    dw op_wrReg + JTAG_TX
   491 000005A4 [D400]                                  dw Chans
   492                                                  ;dw NUM_CHANS dup (op_call + UploadClock)
   493 000005A6 [8EA4]<rept>                            TIMES NUM_CHANS dw op_call + UploadClock
   494 000005BE 8085                                    dw op_drop + opt_ret
   495                                  
   496 000005C0 01E0                    CmdGetGlitches: dw op_wrEvt + JTAG_RST
   497 000005C2 [D800]                                  dw Chans + ch_NAV_GLITCH
   498 000005C4 [B8A4]<rept>                            TIMES NUM_CHANS dw op_call + UploadGlitches
   499 000005DC 8085                                    dw op_drop + opt_ret
   500                                  
   501 000005DE 08C0                    CmdSetDAC:      dw op_rdReg + JTAG_RX       ; wparam
   502                                                  ;dw 3 shl 13                 ; d[11:0] cmd<<13
   503 000005E0 0060                                    dw 3 << 13                 ; d[11:0] cmd<<13
   504                                                  ;dw 8 dup (op_call+DAC_bit)
   505 000005E2 [32A6]<rept>                            TIMES 8 dw op_call+DAC_bit
   506 000005F2 0085                                    dw op_drop                  ; d[11:0]
   507                                                  ;dw 5 dup (op_shl)           ; d[11:0]<<5
   508 000005F4 0091<rept>                              TIMES 5 dw op_shl           ; d[11:0]<<5
   509                                                  ;dw 16 dup (op_call+DAC_bit)
   510 000005FE [32A6]<rept>                            TIMES 16 dw op_call+DAC_bit
   511 0000061E 0187                                    dw op_addi + 1
   512 00000620 00E1                                    dw op_wrEvt + SET_DAC       ; CS_N=1
   513 00000622 8085                                    dw op_drop + opt_ret
   514                                  
   515 00000624 08C0                    CmdSetLCD:      dw op_rdReg + JTAG_RX       ; wparam
   516 00000626 00D1                                    dw op_wrReg + SET_LCD
   517 00000628 8080                                    dw op_ret
   518                                  
   519 0000062A 01E0                    CmdGetJoy:      dw op_wrEvt + JTAG_RST
   520 0000062C 10C0                                    dw op_rdReg + GET_JOY       ; joy
   521 0000062E 01D0                                    dw op_wrReg + JTAG_TX
   522 00000630 8080                                    dw op_ret
   523                                  
   524                                  ; ============================================================================
   525                                  
   526 00000632 0091                    DAC_bit:        dw op_shl
   527 00000634 00E1                                    dw op_wrEvt + SET_DAC       ; SCK=0, CS_N=0
   528 00000636 0287                                    dw op_addi + 2
   529 00000638 00E1                                    dw op_wrEvt + SET_DAC       ; SCK=1
   530 0000063A 8080                                    dw op_ret
   531                                  
   532                                  ; ============================================================================
   533                                  
   534                                  op_fetch64      equ op_call + $             ; a                            19
   535 0000063C 0081                                    dw op_dup                   ; a a
   536 0000063E 0487                                    dw op_addi + 4              ; a a+4
   537 00000640 [44A6]                                  dw op_fetch32               ; a [63:32]
   538 00000642 0082                                    dw op_swap                  ; [63:32] a
   539                                  
   540                                  op_fetch32      equ op_call + $             ; a                             8
   541 00000644 0081                                    dw op_dup                   ; a a
   542 00000646 0094                                    dw op_fetch16               ; a [15:0]
   543 00000648 0082                                    dw op_swap                  ; [15:0] a
   544 0000064A 0287                                    dw op_addi + 2              ; [15:0] a+2
   545 0000064C 0094                                    dw op_fetch16               ; [15:0] [31:16]
   546 0000064E 0083                                    dw op_swap16                ; [15:0] [31:16]<<16
   547 00000650 8088                                    dw op_add + opt_ret         ; [31:0]
   548                                  
   549                                  ; ============================================================================
   550                                  
   551                                  op_store64      equ op_call + $             ; [63:32] [31:0] a             17
   552 00000652 [56A6]                                  dw op_store32               ; [63:32] a
   553 00000654 0487                                    dw op_addi + 4              ; [63:32] a+4
   554                                  
   555                                  op_store32      equ op_call + $             ; [31:0] a                      8
   556 00000656 0084                                    dw op_over                  ; [31:0] a [31:0]
   557 00000658 0083                                    dw op_swap16                ; [15:0] a [31:16]
   558 0000065A 0084                                    dw op_over                  ; [15:0] a [31:16] a
   559 0000065C 0287                                    dw op_addi + 2              ; [15:0] a [31:16] a+2
   560 0000065E 00950085                                dw op_store16, op_drop      ; [15:0] a
   561 00000662 8095                                    dw op_store16 + opt_ret     ; a
   562                                  
   563                                  ; ============================================================================
   564                                  
   565                                  op_swap64       equ op_call + $             ; ah al bh bl                   6
   566 00000664 0086                                    dw op_rot                   ; ah bh bl al
   567 00000666 009E                                    dw op_to_r                  ; ah bh bl          ; al
   568 00000668 0086                                    dw op_rot                   ; bh bl ah          ; al
   569 0000066A 009D                                    dw op_r_from                ; bh bl ah al
   570 0000066C 8080                                    dw op_ret
   571                                  
   572                                  ; ============================================================================
   573                                  
   574                                  op_add64        equ op_call + $             ; ah al bh bl                   7
   575 0000066E 0086                                    dw op_rot                   ; ah bh bl al
   576 00000670 0088                                    dw op_add                   ; ah bh sl
   577 00000672 009E                                    dw op_to_r                  ; ah bh             ; sl
   578 00000674 4088                                    dw op_add + opt_cin         ; sh                ; sl
   579 00000676 009D                                    dw op_r_from                ; sh sl
   580 00000678 8080                                    dw op_ret
   581                                  
   582                                  ; ============================================================================
   583                                  
   584                                  op_shl64_n      equ op_call + $             ; i64 n                       n+8
   585 0000067A [C606]                                  dw Shifted                  ; i64 n Shifted
   586 0000067C 0082                                    dw op_swap                  ; i64 Shifted n
   587 0000067E 0091                                    dw op_shl                   ; i64 Shifted n*2
   588 00000680 0089                                    dw op_sub                   ; i64 Shifted-n*2
   589 00000682 009E                                    dw op_to_r                  ; i64               ; Shifted-n*2
   590 00000684 8080                                    dw op_ret
   591                                  
   592                                                  ;dw 32 dup (op_shl64)        ; i64<<n
   593 00000686 0090<rept>                              TIMES 32 dw op_shl64        ; i64<<n
   594 000006C6 8080                    Shifted:        dw op_ret
   595                                  
   596                                  ; ============================================================================
   597                                  
   598                                  op_extend       equ op_call + $             ; i32                           9
   599 000006C8 0000                                    dw 0                        ; i32 0
   600 000006CA 0084                                    dw op_over                  ; i32 0 i32
   601 000006CC 0090                                    dw op_shl64                 ; i32 sgn xxx
   602 000006CE 0085                                    dw op_drop                  ; i32 sgn
   603 000006D0 0000                                    dw 0                        ; i32 sgn 0
   604 000006D2 0082                                    dw op_swap                  ; i32 0 sgn
   605 000006D4 0089                                    dw op_sub                   ; i32 0-sgn
   606 000006D6 8082                                    dw op_swap + opt_ret        ; i64
   607                                  
   608                                  ; ============================================================================
